@model SelectList
@{
    ViewBag.Title = "Sales Report";
}
<div>
<h2 class="text-center">Annual Sales Report</h2>
</div>
<div class="row my-3">
    <div class="col-2">
        <select id="reportSelect" name="year" asp-items="Model" class="form-control">
            <option value="">Select a Year...</option>
        </select>
    </div>
</div>
<div>
    <svg width="100%" height="600px" class="border border-primary rounded p-2"></svg>
</div>
<script type="module">
    import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";
    // select SVG element
    const svg = d3.select('svg');

    // determine the size of the SVG element
    let w = svg.node().getBoundingClientRect().width;
    let h = svg.node().getBoundingClientRect().height;
    console.log('Width: ' + w);
    console.log('Height: ' + h);
    
    // chart margins
    const chartMargins = { 
        left: 40,
        right: 25,
        top: 25,
        bottom: 80 
    };

    w = w - (chartMargins.left + chartMargins.right);
    h = h - (chartMargins.top + chartMargins.bottom);

    // DDL Year Event listener
    document.querySelector('.row .col-2 [name="year"]').addEventListener('change', (event) => {
        let year = event.target.value;
        console.log("Year: " + year);
        if (year.length > 0) {
            fetch(`/Reports/AnnualSalesReportData?year=${year}`)
                .then(response => {
                    console.log("response status: " + response.status);
                    console.log("response text: " + response.statusText);
                    return response.json();
                })
                .then(data => buildGraph(data))
                .catch(err => console.log(err.message));
        }
    })
    d3.select('.row .col-2 [name="year"]').on('change', (event) => {
        // fetch using event.target.value
    })
    function buildGraph(dataSet) {
        // to clear previous mapped out graphs when applicable
        svg.select('.chartGroup').remove();
        console.log(dataSet);

        // Build Graph here
        let totalItemsRange = d3.extent(dataSet, (d, i) => d.totalItems);
        let maxTotalItems = totalItemsRange[1];
        console.log("Max totalItems: " + maxTotalItems);

        // calculate the bar dimensions
        const barMargin = 10;
        const barWidth = w / dataSet.length;

        // create a y scale
        let yScale = d3.scaleLinear()
            .domain([0, maxTotalItems])
            .range([h, 0]);

        // create x scale
        let monthArray = Array.from(dataSet, (d, i) => d.monthName);
        console.log("array: " + monthArray);

        let xScale = d3.scaleBand()
            .domain(monthArray)
            .range([0, w])
            .paddingInner(0.1);

        // example xScale test:
        console.log("xscale: " + xScale("March"));

        const chartGroup = svg.append('g')
            .classed('chartGroup', true)
            .attr('transform', `translate(${chartMargins.left}, ${chartMargins.top})`);

        // select all 'g' elements and bind the dataSet
        let barGroups = chartGroup
            .selectAll('g')
            .data(dataSet);
        // add new bar groups
        // implement xScale
        let newBarGroups = barGroups.enter()
            .append('g')
            .attr('transform', (d, i) => {
                return `translate(${xScale(d.monthName)}, ${yScale(d.totalItems)})`
            });

        // append new rectangles (bars)
        newBarGroups
            .append('rect')
            .attr('x', 0) 
            .attr('height', 0)
            .attr('y', (d, i) => { return h - yScale(d.totalItems); })
            .attr('width', xScale.bandwidth())
            .style('fill', 'transparent')
            .transition().duration((d, i) => i * 500)
            .delay((d, i) => i + 200)
            .attr('y', 0)
            .attr('height', (d, i) => { return h - yScale(d.totalItems); })
            .style("fill", (d, i) => { 
                return `hsl(240, 100%, ${(100 - (d.totalItems / maxTotalItems * 80))}%)`
            });

        newBarGroups
            .append('text')
            .attr("text-anchor", "middle")
            .attr('x', (d,i) => {return xScale.bandwidth()/2})
            .attr('y', 20)
            .attr('fill', 'white')
            .style('font-size', '1em')
            .text((d,i) => d.totalItems
            .toLocaleString());

        // create the axis and add it to the svg
        let yAxis = d3.axisLeft(yScale);
        chartGroup.append('g')
            .classed('axis y', true)
            .call(yAxis);

        // repeat for the x axis
        let xAxis = d3.axisBottom(xScale);
        chartGroup.append('g')
            .attr('transform', `translate(0,${h}) `)
            .classed('axis x', true)
            .call(xAxis);

    }

</script>